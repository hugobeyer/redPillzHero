[gd_resource type="VisualShader" load_steps=8 format=3 uid="uid://bimss050tu72"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_jk5ym"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_rsoea"]
parameter_name = "outline_size"
hint = 1
max = 64.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e8rfl"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_38i1e"]
size = Vector2(760, 920)
expression = "vec4 original_color = texture(TEXTURE, SCREEN_UV);
float threshold = 0.001;
if (original_color.a > 0.0) {
    result = original_color.rgba;  // Only return the RGB color channel
} else {
    
    bool outline = false;

    for (float x = -outline_size; x <= outline_size; x++) {
        for (float y = -outline_size; y <= outline_size; y++) {
            vec2 offset = vec2(x, y) * TEXTURE_PIXEL_SIZE;  // Adjust offset to match texture space
            vec4 neighbor_color = texture(TEXTURE, SCREEN_UV + offset);
            if (neighbor_color.a > threshold) {
                outline = true;
                break;
            }
        }
        if (outline) {
            break;
        }
    }

    if (outline) {
        result = outline_color.rgba;  // Use the outline color's RGB values
    } else {
        discard;
    }
}
"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_jwagy"]
parameter_name = "outline_color"
default_value_enabled = true
default_value = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_qlou0"]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_50qu7"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float outline_size : hint_range(0, 64) = 1;
uniform vec4 outline_color : source_color = vec4(0.000000, 0.000000, 0.000000, 1.000000);



void fragment() {
// FloatParameter:2
	float n_out2p0 = outline_size;


// ColorParameter:7
	vec4 n_out7p0 = outline_color;


// FloatConstant:8
	float n_out8p0 = 0.000000;


// Input:5
	vec2 n_out5p0 = SCREEN_UV;


	vec4 n_out6p0;
// Expression:6
	n_out6p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		vec4 original_color = texture(TEXTURE, n_out5p0);
		float n_out8p0 = 0.001;
		if (original_color.a > 0.0) {
		    n_out6p0 = original_color.rgba;  // Only return the RGB color channel
		} else {
		    
		    bool outline = false;
		
		    for (float x = -n_out2p0; x <= n_out2p0; x++) {
		        for (float y = -n_out2p0; y <= n_out2p0; y++) {
		            vec2 offset = vec2(x, y) * TEXTURE_PIXEL_SIZE;  // Adjust offset to match texture space
		            vec4 neighbor_color = texture(TEXTURE, n_out5p0 + offset);
		            if (neighbor_color.a > n_out8p0) {
		                outline = true;
		                break;
		            }
		        }
		        if (outline) {
		            break;
		        }
		    }
		
		    if (outline) {
		        n_out6p0 = n_out7p0.rgba;  // Use the outline color's RGB values
		    } else {
		        discard;
		    }
		}
		
	}


// VectorDecompose:9
	float n_out9p0 = n_out6p0.x;
	float n_out9p1 = n_out6p0.y;
	float n_out9p2 = n_out6p0.z;
	float n_out9p3 = n_out6p0.w;


// VectorCompose:10
	vec3 n_out10p0 = vec3(n_out9p0, n_out9p1, n_out9p2);


// Output:0
	COLOR.rgb = n_out10p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1080, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatParameter_rsoea")
nodes/fragment/2/position = Vector2(-720, 0)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_e8rfl")
nodes/fragment/5/position = Vector2(-720, 840)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_38i1e")
nodes/fragment/6/position = Vector2(-240, 0)
nodes/fragment/6/size = Vector2(760, 920)
nodes/fragment/6/input_ports = "0,0,outline_size;1,5,outline_color;2,0,threshold;3,3,SCREEN_UV;"
nodes/fragment/6/output_ports = "0,5,result;"
nodes/fragment/6/expression = "vec4 original_color = texture(TEXTURE, SCREEN_UV);
float threshold = 0.001;
if (original_color.a > 0.0) {
    result = original_color.rgba;  // Only return the RGB color channel
} else {
    
    bool outline = false;

    for (float x = -outline_size; x <= outline_size; x++) {
        for (float y = -outline_size; y <= outline_size; y++) {
            vec2 offset = vec2(x, y) * TEXTURE_PIXEL_SIZE;  // Adjust offset to match texture space
            vec4 neighbor_color = texture(TEXTURE, SCREEN_UV + offset);
            if (neighbor_color.a > threshold) {
                outline = true;
                break;
            }
        }
        if (outline) {
            break;
        }
    }

    if (outline) {
        result = outline_color.rgba;  // Use the outline color's RGB values
    } else {
        discard;
    }
}
"
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_jwagy")
nodes/fragment/7/position = Vector2(-720, 240)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_qlou0")
nodes/fragment/8/position = Vector2(-700.049, 468.332)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorDecompose_50qu7")
nodes/fragment/9/position = Vector2(620, 100)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorCompose_jk5ym")
nodes/fragment/10/position = Vector2(840, -60)
nodes/fragment/connections = PackedInt32Array(2, 0, 6, 0, 7, 0, 6, 1, 8, 0, 6, 2, 6, 0, 9, 0, 9, 0, 10, 0, 9, 1, 10, 1, 9, 2, 10, 2, 5, 0, 6, 3, 10, 0, 0, 0)
